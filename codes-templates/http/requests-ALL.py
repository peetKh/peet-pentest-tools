'''
Code template for most common usages of requests

'''

import requests
import re
import os
import sys

# Helpers function =============================================================

def printq(s):
    try:
        s = '\n'.join( ':'.join(i) for i in s.items() )
    except:
        pass
    if type(s) is bytes:
        try:
            s = s.decode()
        except:
            s = repr(s)[2:-2]
    if s is None:
        s = "<NONE>"
    print('  | ' + s.replace('\n','\n  | '))

# OLD TLSv1 (Deprecated) =======================================================
# This is UNSECURE, but you know what you're doing..... right ?

# # To avoid annoying warnings
# requests.packages.urllib3.disable_warnings()
#
# # To override SSL/TLS DH key minimum size
# # Ref: https://stackoverflow.com/questions/38015537/python-requests-exceptions-sslerror-dh-key-too-small
# requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += 'HIGH:!DH:!aNULL'
#
# # To override SSL/TLS minimum protocol version
# # Ref: https://stackoverflow.com/questions/38501531/forcing-requests-library-to-use-tlsv1-1-or-tlsv1-2-in-python
# from requests.adapters import HTTPAdapter
# from requests.packages.urllib3.poolmanager import PoolManager
# import ssl
# class MyAdapter(HTTPAdapter):
#      def init_poolmanager(self, connections, maxsize, block=False):
#          self.poolmanager = PoolManager(num_pools=connections,
#                                 maxsize=maxsize,
#                                 block=block,
#                                 ssl_version=ssl.PROTOCOL_TLSv1)
# # Create the session
# s = requests.Session( )
# s.verify  = False
# s.headers['User-Agent'] = "Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.4) Gecko/20030624 Netscape/7.1 (ax)"
# s.mount('https://', MyAdapter())

# Session settings =============================================================

s = requests.Session()

# Set headers, e.g. User-Agent
s.headers['User-Agent'] = 'Browser'

# HTTP Basic Auth
from requests.auth import HTTPBasicAuth
s.auth = HTTPBasicAuth(user, password)

# Set cookies
cookies = {'PHP_SESSID': '12345'}
for name, value in cookies.items():
    s.cookies.set(name, value)

# Get cookie value
cookieValue = s.cookies.get('PHP_SESSID')

# Extract tokens ===============================================================
# For csrf tokens, view_state, form_key, whatever....

reFormKey = re.compile('<input name="_formkey" type="hidden" value="([^"]+)"')
def getFormKey(r):
    m = reFormKey.search(r.text)
    formKey = m.group(1)
    print("  formKey=" + formKey)
    return formKey

params = { 'foo': 'bar'}
r = s.get(url, params = params)
formKey = getFormKey( r )

# Sending files ================================================================

# Content-Disposition: form-data; name="upload_file"; filename="file.txt"
# '<form-field-name>': ('<filename>', open(<local-file>,'rb'), '<mime-type>')
files = {'upload_file': ('foobar.txt', open('file.txt','rb'), 'text/x-spam')}
data = {'key': 'value'}
r = s.post(url, data = data, files = files)

# Build multipart-form =========================================================

data = {
    'feld-1' : 'value-1',
    'field-2' : 'value-2' }
multipart = { k: (None, data[k]) for k in data }
# multipart['upload_file'] = ('foobar.txt', open('localfile.txt','rb'), 'text/x-spam')
r = s.post(url,
    files = multipart,
    allow_redirects = True)

# Output =======================================================================

print(" Reponse: " + str(r.status_code))
print( "\n == request ==")
printq(r.request.headers)
printq(r.request.body)
print( "\n == response ==")
printq( r.headers )
printq( r.cookies )
printq( r.text )
