=== Program architecture ===


== PROXY CONNECTION STATES DESCRIPTION ==

  List of all state descriptions, expected events to be monitored with select(),
  actions to take, and corresonding resulting states.

  = PCS_NONE: No connection
    > lstSkt:read
      accept() -> PCS_AWAIT_SOCKS_HEADER

  = PCS_AWAIT_SOCKS_HEADER
    accept() returned a clientskt, wait for header string from client.
    > clientskt:read
      * If connection closed -> PCS_ERR_CLOSE
      * If data, handleSocksHandshake()
        * If correct SOCKS 4 header -> PCS_REMOTE_CONNECT_PENDING
        * If correct SOCKS 5 header -> PCS_AWAIT_SOCKS_COMMAND
        * If incorrect header, sendReply(errorcode) -> PCS_ERR_CLOSE

  = PCS_AWAIT_SOCKS_COMMAND
    Processed and replied to SOCKS 5 header, waiting for command string from client.
    > clientskt:read
      * If connection closed -> PCS_ERR_CLOSE
      * If data, handleSocksHandshake()
        * If correct SOCKS 5 command -> PCS_REMOTE_CONNECT_PENDING
        * If incorrect header, sendReply(errorcode) -> PCS_ERR_CLOSE
  = PCS_REMOTE_CONNECT_PENDING
    Connection to remote host initiated, waiting for connection success or fail.
    > remoteskt:write
      * Connection established, sendReply() -> PCS_READY
    > remoteskt:read
      * Connection failed, sendReply(errorCode) -> PCS_ERR_CLOSE

  = PCS_READY
    SOCKS handshake completed, ready to receive and send data.
    > clientskt/remoteskt:read
      * receive buffer on clientskt/remoteskt, send buffer on remoteskt/clientskt
        * If success -> PCS_READY
        * If wouldblock or did not send all data -> PCS_WAIT_SEND_REMOTE/CLIENT
        * If fail -> PCS_ERR_CLOSE

  = PCS_WAIT_SEND_CLIENT/REMOTE: Data is buffered to be sent to client/remote
    > clientskt/remoteskt:write
      * send buffer to clientskt/remoteskt
        * If success -> PCS_READY
        * If did not send all data -> PCS_WAIT_SEND_CLIENT/REMOTE
        * If fail -> PCS_ERR_CLOSE



= DOCS FOR PROG =


=== Win Socks ===

General doc
    https://tangentsoft.net/wskfaq/articles/io-strategies.html
    http://tvaira.free.fr/reseaux/tp-sockets-tcp-windows.pdf
    https://www.binarytides.com/winsock-socket-programming-tutorial/

On select()
    https://www.winsocketdotnetworkprogramming.com/winsock2programming/winsock2advancediomethod5.html


Ensure whole data entegrity
    https://blog.netherlabs.nl/articles/2009/01/18/the-ultimate-so_linger-page-or-why-is-my-tcp-not-reliable




=== SOCKS PROTOCOL ===

RFCs
    SOCKS 4: https://www.openssh.com/txt/socks4.protocol
    SOCKS 5: 


[3] Request command from client

        +----+-----+-------+------+----------+----------+
        |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |
        +----+-----+-------+------+----------+----------+
        | 1  |  1  | X'00' |  1   | Variable |    2     |
        +----+-----+-------+------+----------+----------+

     Where:

          o  VER    protocol version: X'05'
          o  CMD
             o  CONNECT X'01'
             o  BIND X'02'
             o  UDP ASSOCIATE X'03'
          o  RSV    RESERVED
          o  ATYP   address type of following address
             o  IP V4 address: X'01'
             o  DOMAINNAME: X'03'
             o  IP V6 address: X'04'
          o  DST.ADDR       desired destination address
          o  DST.PORT desired destination port in network octet
             order
             

[4] Reply after connection

        +----+-----+-------+------+----------+----------+
        |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |
        +----+-----+-------+------+----------+----------+
        | 1  |  1  | X'00' |  1   | Variable |    2     |
        +----+-----+-------+------+----------+----------+

     Where:

          o  VER    protocol version: X'05'
          o  REP    Reply field:
             o  X'00' succeeded
             o  X'01' general SOCKS server failure
             o  X'02' connection not allowed by ruleset
             o  X'03' Network unreachable
             o  X'04' Host unreachable
             o  X'05' Connection refused
             o  X'06' TTL expired
             o  X'07' Command not supported
             o  X'08' Address type not supported
             o  X'09' to X'FF' unassigned
          o  RSV    RESERVED
          o  ATYP   address type of following address
             o  IP V4 address: X'01'
             o  DOMAINNAME: X'03'
             o  IP V6 address: X'04'
          o  BND.ADDR       server bound address
          o  BND.PORT       server bound port in network octet order


=== Error codes ===

http://www.destructor.de/firebird/winsockerrors.htm
https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-error-codes-2


=== WinSock structures ===


// IPv4 AF_INET sockets:
struct sockaddr_in {
    short            sin_family;   // e.g. AF_INET, AF_INET6
    unsigned short   sin_port;     // e.g. htons(3490)
    struct in_addr   sin_addr;     // see struct in_addr, below
    char             sin_zero[8];  // zero this if you want to
};


typedef struct in_addr {
  union {
    struct {
      u_char s_b1,s_b2,s_b3,s_b4;
    } S_un_b;
    struct {
      u_short s_w1,s_w2;
    } S_un_w;
    u_long S_addr;
  } S_un;
} IN_ADDR, *PIN_ADDR, FAR *LPIN_ADDR;


struct sockaddr {
    unsigned short    sa_family;    // address family, AF_xxx
    char              sa_data[14];  // 14 bytes of protocol address
};



= end =
